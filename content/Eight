---
title: "hot100精简版题解"
publishedAt: "2024-5-8"
summary: "更新中"
---

## 考前必背

### quick_sort

### merge_sort

### heap

### levelOrder

```go
func levelOrder(root *TreeNode) (ans [][]int) {
    if root == nil {
        return
    }
    q := []*TreeNode{root}
    for len(q) > 0 {
        n := len(q)
        vals := make([]int, n) // 预分配空间
        for i := range vals {
            node := q[0]
            q = q[1:]
            vals[i] = node.Val
            if node.Left != nil {
                q = append(q, node.Left)
            }
            if node.Right != nil {
                q = append(q, node.Right)
            }
        }
        ans = append(ans, vals)
    }
    return
}
```

### preOrder

### inOrder

### postOrder

### dfs

```java
void dfs(int[][] grid, int r, int c) {
    // 判断 base case
    // 如果坐标 (r, c) 超出了网格范围，直接返回
    if (!inArea(grid, r, c)) {
        return;
    }
    // 访问上、下、左、右四个相邻结点
    dfs(grid, r - 1, c);
    dfs(grid, r + 1, c);
    dfs(grid, r, c - 1);
    dfs(grid, r, c + 1);
}

// 判断坐标 (r, c) 是否在网格中
boolean inArea(int[][] grid, int r, int c) {
    return 0 <= r && r < grid.length 
        	&& 0 <= c && c < grid[0].length;
}
```

### bfs

### 0-1背包

### 完全背包

### KMP算法

### 二分

```go
// 【下面列了三种写法，选一种自己喜欢的就行】

// lowerBound 返回最小的满足 nums[i] >= target 的 i
// 如果数组为空，或者所有数都 < target，则返回 nums.length
// 要求 nums 是非递减的，即 nums[i] <= nums[i + 1]

// 闭区间写法
func lowerBound(nums []int, target int) int {
    left, right := 0, len(nums)-1 // 闭区间 [left, right]
    for left <= right {           // 区间不为空
        // 循环不变量：
        // nums[left-1] < target
        // nums[right+1] >= target
        mid := left + (right-left)/2
        if nums[mid] < target {
            left = mid + 1 // 范围缩小到 [mid+1, right]
        } else {
            right = mid - 1 // 范围缩小到 [left, mid-1]
        }
    }
    return left // 或者 right+1
}

// 左闭右开区间写法
func lowerBound2(nums []int, target int) int {
    left, right := 0, len(nums) // 左闭右开区间 [left, right)
    for left < right {          // 区间不为空
        // 循环不变量：
        // nums[left-1] < target
        // nums[right] >= target
        mid := left + (right-left)/2
        if nums[mid] < target {
            left = mid + 1 // 范围缩小到 [mid+1, right)
        } else {
            right = mid // 范围缩小到 [left, mid)
        }
    }
    return left // 或者 right
}

// 开区间写法
func lowerBound3(nums []int, target int) int {
    left, right := -1, len(nums) // 开区间 (left, right)
    for left+1 < right {         // 区间不为空
        // 循环不变量：
        // nums[left] < target
        // nums[right] >= target
        mid := left + (right-left)/2
        if nums[mid] < target {
            left = mid // 范围缩小到 (mid, right)
        } else {
            right = mid // 范围缩小到 (left, mid)
        }
    }
    return right // 或者 left+1
}

func search(nums []int, target int) int {
    i := lowerBound(nums, target) // 选择其中一种写法即可
    if i == len(nums) || nums[i] != target {
        return -1
    }
    return i
}
```



# 哈希表

## 1.两数之和

哈希表遍历数组的同时压入，一旦找到加起来为target的数字对就返回

## 2.字母异位词分组

哈希表+对字母数组进行排序压入哈希表

把哈希表中的元素压入答案数组

## 3.最长连续序列

用一个哈希表遍历数组，然后开一个循环，for i, v := range nums 在循环体里面判断每一个元素前一个存在不存在，若不存在就把他作为开头，然后开个循环去找一找后面最长到哪，并更新ans

# 双指针

## 4.移动零

双指针交换，slow＆fast，当fast指针遇到非0就交换slow和fast指向的元素，并把slow++

## 5.盛最多水的容器

left和right指针一个指向最左边元素一个指向最右边元素

开个循环

两者指向对象较小的那个指针向中间移动，统计容量，更新ans，直到两个指针相遇，return ans

## 6.三数之和

先开一个for循环确定第一个元素

如果这个元素和前一个元素相等，说明已经算过这个元素了，直接continue

如果这个元素是>0的，直接continue

然后用left和right指针

因为数组有序，如果和小于target就left++，大于target就right--

如果left指针下一个和这一个相等，直接右移即可

遇到和等于target的就压栈

最后别忘了left++和right--

## 7.接雨水

左右指针记录遍历过的最大值leftMax和rightMax

开个for (left < right)的循环

先更新leftMax和rightMax

如果left指向的元素小于right指向的元素，计算left凹槽的雨水量右移，right同理

当left和right相遇的时候就计算出了接的总雨水量

# 滑动窗口

## 8.无重复字符的最长子串

```go
func lengthOfLongestSubstring(s string) (ans int) {
    letter := [128]bool{}
    left := 0
    for right, v := range s {
        for letter[v] {
            letter[s[left]] = false
            left ++;
        }
        letter[v] = true
        ans = max(ans, right - left + 1)
    } 
    return
}
```

1.字符数组可以开长度为128的

2.可以右窗口固定动，左窗口视条件动

3.letter[v]为什么放在循环前就过不了？

答：每一次都进循环就不对了

## 9.找到字符串中所有字母异位词

```go
func findAnagrams(s string, p string) (ans []int) {
    n, k := len(s), len(p)
    left, right := 0, k - 1
    letterP := [128]int{}
    letterS := [128]int{}
    if k > n { return nil }
    for i := 0; i < k; i ++ {
        letterP[p[i] - 'a'] ++
    }
    for i := left; i <= right; i ++ {
        letterS[s[i] - 'a'] ++
    }
    for right < n {
        if letterP == letterS {
            ans = append(ans, left)
        }
        letterS[s[left] - 'a'] --
        left ++
        right ++
        if right >= n { continue }
        letterS[s[right] - 'a'] ++
    }
    return
}
```

一个定长滑动窗口，其实很简单

# 子串

## 10.和为k的子数组

开一个哈希表，令mp[0] = 1，开一个prefix，遍历数组，找找prefix-target在不在哈希表里，如果在的话，就把count += mp[prefix-target]并让mp[prefix] ++

## 11.滑动窗口最大值

单调队列

```go
func maxSlidingWindow(nums []int, k int) []int {
    //单调队列
    ans := make([]int, 0, len(nums) - k + 1)
    q := []int{}
    for i, v := range nums {
        for len(q) > 0 && v >= nums[q[len(q) - 1]] {
            q = q[:len(q) - 1]
        }
        q = append(q, i) 
        if q[0] <= i - k {
            q = q[1:]
        }
        if i >= k - 1 {
            ans = append(ans, nums[q[0]])
        }
    }
    return ans
}
```

注意队列里存的是下标而不是具体的值

## *12.最小覆盖子串

# 普通数组

## 13.最大子数组和

贪心，前缀和，prefix小于0要重新开始prefix计数，ans记录prefix的最大值

## 14.合并区间

先按第一个数字排序

然后a的第二个数和b的第一个数作比较

如果a[1] < b[0]则合并（模拟栈实现），即弹出后压入(a[0],b[1])

## 15.轮转数组

先整个反转，再反转前k个，再反转k个后面的

## 16.除自身以外数组的乘积

先从左到右计算要乘的值，再从右向左计算要乘的值

## 17.缺失的第一个正数

用一个哈希表去存数组里的数

然后从1找到n，如果有一个不在，那不在的就是第一个缺失的正数，如果都在，那第一个缺失的正数是n + 1                                                                                                                                

## 18.矩阵置零

1.记录下来第一行和第一列是否置零

2.扫描行列 1~n，如果有0就把对应的第一行和列置零

3.扫描第一行第一列，扫描到0就把列/行全置零

4.根据row_zero和col_zero置零

## *19.螺旋矩阵

```
class Solution {
public:
    vector<vector<int>> generateMatrix(int n) {
        vector<vector<int>> ans(n, vector<int>(n));
        int b = n - 1;  //bottom
        int t = 0;      //top
        int l = 0;      //left
        int r = n - 1;  //right
        int k = 1;
        while (k <= n * n) {
        for (int i = l; i <= r; i ++, k ++) 
            ans[t][i] = k;
            t ++;
        for (int i = t; i <= b; i ++, k ++) 
            ans[i][r] = k;
            r --;
        for (int i = r; i >= l; i --, k ++) 
            ans[b][i] = k;
            b --;
        for (int i = b; i >= t; i --, k ++) 
            ans[i][l] = k;
            l ++;
        }
        return ans;
    }
};
```

模板

## 20.旋转图像

先水平翻转，再对角线反转

注意第二个循环体是j < i

## 21.搜索二维矩阵II

从矩阵右上方开始找，小于就下移，大于就左移

# 链表

## 22.相交链表

两个同时遍历，遍历到nil（尽头）就从另一个链表的头开始遍历，相遇的时候就是相交的点

## 23.反转链表

prev,curr,next指针

注意循环体是curr!=nil

 ## 24.回文链表

用快慢指针找到中间的指针，把链表分成两部分，然后反转第二个链表，比较一下两个链表是不是一样的

加不加next，如果加了那返回值也要加，不加返回值也不能加

## 25.环形链表

floyd算法

## 26.环形链表II

注意快慢指针要放在循环体里面，不然不会进第一个循环

## 27.合并两个有序链表

归并法

```
/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func middleNode(head *ListNode) *ListNode {
    pre, slow, fast := head, head, head
    for fast != nil && fast.Next != nil {
        pre = slow
        slow = slow.Next
        fast = fast.Next
    }
    pre.Next = nil
    return slow
}

func mergeTwoLists(list1, list2 *ListNode) *ListNode {
    dummy := ListNode{}
    cur := &dummy
    for list1 != nil && list2 != nil {
        if list1.Val < list2.Val {
            cur.Next = list1
            list1 = list1.Next
        } else {
            cur.Next = list2
            list2 = list2.Next
        }
        cur = cur.Next
    }
    if list1 != nil {
        cur.Next = list1
    } else {
        cur.Next = list2
    }
    return dummy.Next
}

func sortList(head *ListNode) *ListNode {
    if head == nil || head.Next == nil {
        return head
    }    
    head2 := middleNode(head)
    head = sortList(head)
    head2 = sortList(head2)
    return mergeTwoLists(head, head2)
}
```

## 28.两数相加

看看大数乘法

进位和计算放在一个大循环里面做

```go
func addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {
    tmp1, tmp2 := l1, l2
    carry := 0
    dummy := &ListNode{}
    node := dummy
    for tmp1 != nil || tmp2 != nil {
        if tmp1 != nil && tmp2 != nil { 
            carry += tmp1.Val + tmp2.Val
        } else if tmp1 == nil {
            carry += tmp2.Val
        } else {
            carry += tmp1.Val
        }
		/*
		if l1 != nil {
            carry += l1.Val // 节点值和进位加在一起
            l1 = l1.Next // 下一个节点
        }
        if l2 != nil {
            carry += l2.Val // 节点值和进位加在一起
            l2 = l2.Next // 下一个节点
        }
		写成这种形式代码更清晰，可扩展性更好
作者：灵茶山艾府
链接：https://leetcode.cn/problems/add-two-numbers/solutions/2327008/dong-hua-jian-ji-xie-fa-cong-di-gui-dao-oe0di/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
		*/
        node.Next = &ListNode{Val: carry % 10}
        node = node.Next
        carry /= 10
        if tmp1 != nil { tmp1 = tmp1.Next }
        if tmp2 != nil { tmp2 = tmp2.Next }
    }
    fmt.Println(carry)
    if carry != 0 { node.Next = &ListNode{Val: carry} }
    return dummy.Next
}
```



## 29.删除链表的倒数第N个结点

快慢指针，快指针先走N步

## 30.两两交换链表中的节点

dummyHead->A->B->C

dummyHead->B

A->C

B->A

```go
func addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {
    carry := 0
    dummy := &ListNode{Val:0}
    curr := dummy
    for l1 != nil || l2 != nil || carry != 0 {
        if l1 != nil {
            carry += l1.Val
            l1 = l1.Next
        }
        if l2 != nil {
            carry += l2.Val
            l2 = l2.Next
        }
        curr.Next = &ListNode{Val: carry % 10}
        carry /= 10
        curr = curr.Next
    } 
    return dummy.Next
}
```

## 31.K个一组反转链表

先写一个reverseList，传入head和tail，返回tail和head

hair（tmpHair）的下一个节点得连上reversed链表的head

tmp移到tail作为下一个翻转的hair

tmp.Next设成head

```go
/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func reverseKGroup(head *ListNode, k int) *ListNode {
    dummy := &ListNode{Val: 0, Next: head}
    prev := dummy
    for head != nil {
        tail := prev
        //tail后移k格
        for i := 0; i < k; i ++ {
            tail = tail.Next
            //如果越界则直接返回链表
            if tail == nil {
                return dummy.Next
            }
        }

        next := tail.Next
        head, tail = reverseList(head, tail)
        //做好连接
        prev.Next = head
        tail.Next = next
        //做好下一轮循环的准备
        prev = tail
        head = tail.Next
    }
    return dummy.Next
}
func reverseList(head *ListNode, tail *ListNode) (*ListNode, *ListNode) {
    prev := tail.Next
    curr := head
    for prev != tail {
        next := curr.Next
        curr.Next = prev 
        prev = curr
        curr = next
    }
    return prev, head
}
```



## 32.随机链表的复制

先构造next关系，并建立哈希表

random关系通过二次遍历加哈希表建立

## 33.排序链表

绝对不止mid

1.归并

先写合并两个升序链表，再用分治思想

left := mergeKLists(nums[:m/2])

right := mergeKLists(nums[m/2:])

return mergeTwoLists(left, right)

类似于重建二叉树

2.堆

写个堆一个一个放入再弹出即可

## 34.合并k个升序链表

用堆做，类似合并2个有序链表

堆的题都用cpp来写把？

## 35.LRUcache

双向链表+哈希表维护key，v（ListNode）

```go
type Node struct {
    key, val int
    prev *Node
    next *Node
}

type LRUCache struct {
    capacity int
    head, tail *Node
    m map[int]*Node
}


func Constructor(capacity int) LRUCache {
    head, tail := &Node{}, &Node{}
    head.next = tail
    tail.prev = head
    return LRUCache{capacity, head, tail, make(map[int]*Node)}
}


func (this *LRUCache) Get(key int) int {
    cache := this.m
    if node, ok := cache[key]; ok {
        this.moveToHead(cache[key])
        return node.val
    }
    return -1
}


func (this *LRUCache) Put(key int, value int)  {
    cache := this.m
    if node, ok := cache[key]; ok {
        node.val = value
        this.moveToHead(cache[key])
        return
    } else {
        if this.capacity <= len(cache) {
            deletedNode := this.tail.prev 
            delete(cache, deletedNode.key)
            this.deleteNode(deletedNode)
        }
    }
    newNode := &Node{key, value, nil, nil}
    this.addToHead(newNode)
    cache[key] = newNode
}

func (this *LRUCache) moveToHead(node *Node) {
    this.deleteNode(node)
    this.addToHead(node)
}

func (this *LRUCache) addToHead(node *Node) {
    node.next = this.head.next
    node.prev = this.head
    this.head.next.prev =  node
    this.head.next = node 
}

func (this *LRUCache) deleteNode(node *Node) {
    node.prev.next = node.next
    node.next.prev = node.prev
}
/**
 * Your LRUCache object will be instantiated and called as such:
 * obj := Constructor(capacity);
 * param_1 := obj.Get(key);
 * obj.Put(key,value);
 */
```



# 二叉树

## 36.二叉树的中序遍历

## 37.二叉树的最大深度

return max(depth(root.Left),depth(root.Right)) + 1

## 38.翻转二叉树

left = invert(root->left)

right = invert(root->right)

root.Left = right

root.Right = left

return 

## 39.对称二叉树

```go
func isSameTree(p, q *TreeNode) bool {
    if p == nil || q == nil {
        return p == q
    }
    return p.Val == q.Val && isSameTree(p.Left, q.Right) && isSameTree(p.Right, q.Left)
}
func isSymmetric(root *TreeNode) bool {
    return isSameTree(root.Left, root.Right)
}
```

## *40.二叉树的直径

```go
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func diameterOfBinaryTree(root *TreeNode) (ans int) {
    var dfs func(*TreeNode) int
    dfs = func(node *TreeNode) int {
        if node == nil {
            return -1
        }
        lLen := dfs(node.Left) + 1
        rLen := dfs(node.Right) + 1
        ans = max(ans, lLen + rLen)
        return max(lLen, rLen)
    }
    dfs(root)
    return
}
```

通过此题熟悉一下闭包怎么写

## 41. 二叉树层序遍历

注意append的用法不是方法，而是函数

```go
func levelOrder(root *TreeNode) (ans [][]int) {
    if root == nil {
        return
    }
    q := []*TreeNode{root}
    for len(q) > 0 {
        n := len(q)
        vals := make([]int, n) // 预分配空间
        for i := range vals {
            node := q[0]
            q = q[1:]
            vals[i] = node.Val
            if node.Left != nil {
                q = append(q, node.Left)
            }
            if node.Right != nil {
                q = append(q, node.Right)
            }
        }
        ans = append(ans, vals)
    }
    return
}
```



## 42.将有序数组转换为二叉搜索树

```go
func sortedArrayToBST(nums []int) *TreeNode {
    if len(nums) == 0 { return nil }
    mid := len(nums) / 2
    root := &TreeNode{Val: nums[mid]}
    root.Left = sortedArrayToBST(nums[:mid])
    root.Right = sortedArrayToBST(nums[mid + 1:])
    return root
}
```

类似于重建二叉树

## *43.验证二叉搜索树

```go
func dfs(node *TreeNode, left, right int) bool {
    if node == nil {
        return true
    }
    x := node.Val
    return left < x && x < right &&
        dfs(node.Left, left, x) &&
        dfs(node.Right, x, right)
}

func isValidBST(root *TreeNode) bool {
    return dfs(root, math.MinInt, math.MaxInt)
}
```

## 44.[二叉搜索树中第 K 小的元素](https://leetcode.cn/problems/kth-smallest-element-in-a-bst/)

利用二叉搜索树中序遍历有序的特点

中序遍历的第k个即为所求

## 45.二叉树的右视图

板子题：输出每层层序遍历的最后一个

## *46.二叉树展开为链表

```go
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
// 辅助函数：通过后序遍历展开树，返回新的链表头节点
func flatten(root *TreeNode) {
    var head *TreeNode
    var dfs func(*TreeNode)
    dfs = func(node *TreeNode) {
        if node == nil {
            return
        }
        dfs(node.Right)
        dfs(node.Left)
        node.Left = nil
        node.Right = head // 头插法，相当于链表的 node.Next = head
        head = node       // 现在链表头节点是 node
    }
    dfs(root)
}
```

## 47.[从前序与中序遍历序列构造二叉树](https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/)

```go
func buildTree(preorder []int, inorder []int) *TreeNode {
    n := len(preorder)
    if n == 0 {
        return nil
    }
    leftSize := slices.Index(inorder, preorder[0])
    left := buildTree(preorder[1: 1 + leftSize], inorder[:leftSize])
    right := buildTree(preorder[1 + leftSize:], inorder[1+leftSize:])
    return &TreeNode{preorder[0], left, right}
}
```

## *48.路径总和III

```go
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func pathSum(root *TreeNode, targetSum int) (ans int) {
    cnt := map[int]int{0: 1}
    var dfs func(*TreeNode, int)
    dfs = func(node *TreeNode, s int) {
        if node == nil {
            return
        }
        s += node.Val
        ans += cnt[s - targetSum]
        cnt[s] ++
        dfs(node.Left, s)
        dfs(node.Right, s)
        cnt[s] --
    }
    dfs(root, 0)
    return ans
}
```



## 49.二叉树的最近公共祖先

```go
 func lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {
    if root == nil { return nil }
    if root.Val == p.Val || root.Val == q.Val { return root }
    left := lowestCommonAncestor(root.Left, p, q)
    right := lowestCommonAncestor(root.Right, p, q)
    if left != nil && right != nil { return root }
    if left == nil { return right }
    return left
}
```

## *50.二叉树中的最大路径和

```go
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func maxPathSum(root *TreeNode) (ans int) {
    ans = math.MinInt
    var dfs func(*TreeNode) int
    dfs = func(node *TreeNode) int {
        if node == nil {
            return 0
        }
        lVal := dfs(node.Left)
        rVal := dfs(node.Right)
        ans = max(ans, lVal + rVal + node.Val)
        return max(max(lVal, rVal) + node.Val, 0)
    }
    dfs(root)
    return ans
}
```



# 图

## 51.岛屿数量

```java
void dfs(int[][] grid, int r, int c) {
    // 判断 base case
    // 如果坐标 (r, c) 超出了网格范围，直接返回
    if (!inArea(grid, r, c)) {
        return;
    }
    // 访问上、下、左、右四个相邻结点
    dfs(grid, r - 1, c);
    dfs(grid, r + 1, c);
    dfs(grid, r, c - 1);
    dfs(grid, r, c + 1);
}

// 判断坐标 (r, c) 是否在网格中
boolean inArea(int[][] grid, int r, int c) {
    return 0 <= r && r < grid.length 
        	&& 0 <= c && c < grid[0].length;
}
```

此题注意是'1' '0'

## *52.腐烂的橘子

多源BFS

## *53.课程表

拓扑排序

## 54.前缀树

1.结构体里有isEnd字段和一个children数组，children [26]*TreeNode

2.要写一个searchPrefix函数方便复用

```go
func (this *Trie) SearchPrefix(word string) *Trie {
    node := this
    for _, char := range word {
        char -= 'a'
        if node.children[char] != nil {
            node = node.children[char]
        } else {
            return nil
        }
    }
    return node
}
```

注意range的第二位才是value

# 回溯

## 55.[全排列](https://leetcode.cn/problems/permutations/)

## 56.[子集](https://leetcode.cn/problems/subsets/)

## 57.[电话号码的字母组合](https://leetcode.cn/problems/letter-combinations-of-a-phone-number/)

# 二分查找

## 搜索插入位置

就是个二分查找，注意target > nums[mid]，还有注意return 的是left

## 搜索二维矩阵

一种思路是和搜索二维矩阵一样

还有一种是分两次二分查找

```go
func searchMatrix(matrix [][]int, target int) bool {
    left, right := 0, len(matrix[0]) - 1
    up, down := 0, len(matrix) - 1
    for up <= down {
        heightMid := up + (down - up) / 2
        if target > matrix[heightMid][0] {
            up = heightMid + 1
        } else if target < matrix[heightMid][0] {
            down = heightMid - 1
        } else {
            return true
        }
    }
    if down < 0 { return false }//要用down而不是up
    targetRow := down
    for left <= right {
        mid := left + (right - left) / 2
        if target > matrix[targetRow][mid] {
            left = mid + 1
        } else if target < matrix[targetRow][mid] {
            right = mid - 1
        } else {
            return true
        }
    }
    return false
}
```

## 在排序数组中查找元素的第一个和最后一个位置

两次二分查找，第一次对象是target作为start，第二次对象是target + 1的起始位置，-1就是target的结束位置

``` go
func lowerBound(nums []int, target int) int {
    left, right := 0, len(nums) - 1
    for left <= right {
        mid := left + (right - left) / 2
        if nums[mid] >= target {
            right = mid - 1
        } else {
            left = mid + 1
        }
    }
    return left
}

func searchRange(nums []int, target int) []int {
    start := lowerBound(nums, target)
    if start == len(nums) || nums[start] != target {
        return []int{-1, 1}
    }
    end := lowerBound(nums, target + 1) - 1
    return []int{start, end}
}
```

# 栈

# 堆

# 贪心

# dp

# 多维dp

# 技巧